import telebot
from pymongo import MongoClient
# from config import BOT_TOKEN, MONGO

# bot = BOT_TOKEN
bot = telebot.TeleBot("6779810273:AAEPuH8DTjt6JjKGOZVvnWcPB8vPqFG1OKc")



class DataBase:
	def __init__(self):
		# cluster = MONGO
		cluster = MongoClient("mongodb+srv://helikeel:2aCEOKLIMczzb17U@digo-1.bgjk2no.mongodb.net/?retryWrites=true&w=majority")

		self.db = cluster["QuizBot"]
		self.users = self.db["Users"]
		self.questions = self.db["Questions"]

		# –ï—à–µ –æ–¥–Ω–∞ –±–∞–∑–∞ —É–ø—Ä–∞—ç–Ω–µ–Ω–∏–π –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
		# self.course = self.db["Course"]

		self.questions_count = len(list(self.questions.find({})))

		# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —É—Ä–æ–∫–∞ –≤ –ø–ª–∞—Ç–Ω–æ–º –∫—É—Ä—Å–µ
		# self.course_cont = len(list(self.course.find({})))

	def get_user(self, chat_id):
		user = self.users.find_one({"chat_id": chat_id})

		if user is not None:
			return user

		# –î–æ–±–∞–≤–ª–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –û–ø–ª–∞—á–µ–Ω–æ –∏ –ù–æ–º–µ—Ä/–û—Ç–≤–µ—Ç –ü–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞
		user = {
			"chat_id": chat_id,
			"is_passing": False,
			"is_passed": False,
			"paid": False,
			"question_index": None,
			"answers": [],
			"course_index": None,
			"course_answers": []
		}

		self.users.insert_one(user)

		return user


	def set_user(self, chat_id, update):
		self.users.update_one({"chat_id": chat_id}, {"$set": update})

	def get_question(self, index):
		return self.questions.find_one({"id": index})

db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
	# bot.send_message(message.from_user.id, "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")
	print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")

	user = db.get_user(message.chat.id)
	# print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	if user["is_passed"]:
		print("–ï—Å–ª–∏ —É—ç–µ –ø—Ä–æ—à–µ–ª")
		bot.send_message(message.from_user.id, "–í—ã –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é –∫—É—Ä—Å–∞ –ø–æ –¥–∂–∞–∑-–≤–æ–∫–∞–ª—É. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É üëçüòá –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 30 –µ–≤—Ä–æ –Ω–∞ —Å—á–µ—Ç Eugenia Evy Anstal-P√µld EE282200001109459014 –∏ —É–∫–∞–∂–∏—Ç–µ –≤ –ø–æ—è—Å–Ω–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
		return

	if user["is_passing"]:
		print("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞")
		return


	db.set_user(message.chat.id, {"question_index": 0, "is_passing": True})
	# print("—É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	user = db.get_user(message.chat.id)
	# print("–ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	post = get_question_message(user)
	# print("–ü–æ–ª—É—á–∏–ª–∏ –≤–æ–ø—Ä–æ—Å")
	if post is not None:
		bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["answers"].append(int(query.data.split("&")[1]))
	db.set_user(query.message.chat.id, {"answers": user["answers"]})

	post = get_answered_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["question_index"] += 1
	db.set_user(query.message.chat.id, {"question_index": user["question_index"]})

	post = get_question_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])

# # –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π Callback	–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É –æ–ø–ª–∞—Ç—ã
# @bot.callback_query_handler(func=lambda query: query.data == "?pay")
# def pay(query):
# 	user = db.get_user(query.message.chat.id)
#
# 	# –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç ‚Ññ2 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# 	# payments_bot = "https://web.telegram.org/k/#@JazzVocalClassesBot"
# 	payments_bot = "https://web.telegram.org/k/#@msnsgerBot"
# 	# bot.send_message(message.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")
# 	bot.send_message(query.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")
# 	# bot.send_message(message.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")
# 	# bot.send_message(query.from_user.id, "–í—ã –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é –∫—É—Ä—Å–∞ –ø–æ –¥–∂–∞–∑-–≤–æ–∫–∞–ª—É. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É üëçüòá –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 30 –µ–≤—Ä–æ –Ω–∞ —Å—á–µ—Ç Eugenia Evy Anstal-P√µld EE282200001109459014 –∏ —É–∫–∞–∂–∏—Ç–µ –≤ –ø–æ—è—Å–Ω–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")

def get_question_message(user):
	if user["question_index"] == db.questions_count:
		count = 0
		for question_index, question in enumerate(db.questions.find({})):

			if question["correct"] == user["answers"][question_index]:
				count += 1
		percents = round(100 * count / db.questions_count)

		if percents < 40:
			smile = "üò•"
		elif percents < 60:
			smile = "üòê"
		elif percents < 90:
			smile = "üòÄ"
		else:
			smile = "üòé"


		text = f"–í—ã –ø—Ä–æ—à–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é –∫—É—Ä—Å–∞ –ø–æ –¥–∂–∞–∑-–≤–æ–∫–∞–ª—É. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É üëçüòá –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ 30 –µ–≤—Ä–æ –Ω–∞ —Å—á–µ—Ç Eugenia Evy Anstal-P√µld EE282200001109459014 –∏ —É–∫–∞–∂–∏—Ç–µ –≤ –ø–æ—è—Å–Ω–µ–Ω–∏–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
		# –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ö –æ–ø–ª–∞—Ç–µ" >> —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
		# keyboard2 = telebot.types.InlineKeyboardMarkup()
		# keyboard2.row(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ö—É—Ä—Å '–î–∂–∞–∑-–í–æ–∫–∞–ª'", callback_data="?pay"))

		db.set_user(user["chat_id"], {"is_passed": False, "is_passing": False})

		return {
			"text": text,
			"keyboard": None
		}

	question = db.get_question(user["question_index"])

	if question is None:
		return

	keyboard = telebot.types.InlineKeyboardMarkup()
	for answer_index, answer in enumerate(question["answers"]):
		keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
														callback_data=f"?ans&{answer_index}"))

	text = f"–£—Ä–æ–∫ ‚Ññ{user['question_index'] + 1}\n\n{question['text']}"

	return {
		"text": text,
		"keyboard": keyboard
	}


def get_answered_message(user):
	question = db.get_question(user["question_index"])

	text = f"–í–æ–ø—Ä–æ—Å ‚Ññ{user['question_index'] + 1}\n\n{question['text']}\n"

	for answer_index, answer in enumerate(question["answers"]):
		text += f"{chr(answer_index + 97)}) {answer}"

		if answer_index == question["correct"]:
			text += " ‚úÖ"
		elif answer_index == user["answers"][-1]:
			text += " ‚ùå"

		text += "\n"

	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="?next"))

	return {
		"text": text,
		"keyboard": keyboard
	}


bot.polling()
