import telebot
from pymongo import MongoClient
# from config import BOT_TOKEN, MONGO

# bot = BOT_TOKEN
bot = telebot.TeleBot("BOT_TOKEN")



class DataBase:
	def __init__(self):
		# cluster = MONGO
		cluster = MongoClient("MONGO_URL")

		self.db = cluster["QuizBot"]
		self.users = self.db["Users"]
		self.questions = self.db["QuestionsUX"]

		
		# self.course = self.db["Course"]

		self.questions_count = len(list(self.questions.find({})))

		
		# self.course_cont = len(list(self.course.find({})))

	def get_user(self, chat_id):
		user = self.users.find_one({"chat_id": chat_id})

		if user is not None:
			return user

		
		user = {
			"chat_id": chat_id,
			"is_passing": False,
			"is_passed": False,
			"paid": False,
			"question_index": None,
			"answers": [],
			"course_index": None,
			"course_answers": []
		}

		self.users.insert_one(user)

		return user


	def set_user(self, chat_id, update):
		self.users.update_one({"chat_id": chat_id}, {"$set": update})

	def get_question(self, index):
		return self.questions.find_one({"id": index})

db = DataBase()


@bot.message_handler(commands=["start"])
def start(message):
	# bot.send_message(message.from_user.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –Ω–∞—à–µ–ª —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —á–µ–∫–ª–∏—Å—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏. –Ø —Ä–µ—à–∏–ª —Å–æ–∑–¥–∞—Ç—å –∫—É—Ä—Å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –≤—Å–µ—Ö —à–∞–≥–∞—Ö, –Ω–∞—á–∏–Ω–∞—è –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –∏ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –î–∞–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ –∏—Å—Å–ª–µ–¥—É–µ–º —ç—Ç–æ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
	# print("–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã")

	user = db.get_user(message.chat.id)
	# print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

	if user["is_passed"]:
		# print("–ï—Å–ª–∏ —É—ç–µ –ø—Ä–æ—à–µ–ª")
		bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º –º–∏–Ω–∏-–±–æ—Ç–æ–º –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ UX/UI! –ñ–µ–ª–∞–µ–º –≤–∞–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö —Ü–µ–ª–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ UX/UI –¥–∏–∑–∞–π–Ω–∞! üëçüòá")
		return

	if user["is_passing"]:
		# print("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞")
		return


	db.set_user(message.chat.id, {"question_index": 0, "is_passing": True})
	
	user = db.get_user(message.chat.id)
	
	post = get_question_message(user)
	
	if post is not None:
		bot.send_message(message.from_user.id, post["text"], reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data.startswith("?ans"))
def answered(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["answers"].append(int(query.data.split("&")[1]))
	db.set_user(query.message.chat.id, {"answers": user["answers"]})

	post = get_answered_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])

@bot.callback_query_handler(func=lambda query: query.data == "?next")
def next(query):
	user = db.get_user(query.message.chat.id)

	if user["is_passed"] or not user["is_passing"]:
		return

	user["question_index"] += 1
	db.set_user(query.message.chat.id, {"question_index": user["question_index"]})

	post = get_question_message(user)
	if post is not None:
		bot.edit_message_text(post["text"], query.message.chat.id, query.message.id,
						 reply_markup=post["keyboard"])

# # –ù–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π Callback	–¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É –æ–ø–ª–∞—Ç—ã
# @bot.callback_query_handler(func=lambda query: query.data == "?pay")
# def pay(query):
# 	user = db.get_user(query.message.chat.id)
#
# 	# –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç ‚Ññ2 —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
# 	# payments_bot = "https://web.telegram.org/k/#@JazzVocalClassesBot"
# 	payments_bot = "https://web.telegram.org/k/#@msnsgerBot"
# 	# bot.send_message(message.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")
# 	bot.send_message(query.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")
# 	# bot.send_message(message.from_user.id, f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {payments_bot}")


def get_question_message(user):
	if user["question_index"] == db.questions_count:
		count = 0
		for question_index, question in enumerate(db.questions.find({})):

			if question["correct"] == user["answers"][question_index]:
				count += 1
		percents = round(100 * count / db.questions_count)

		if percents < 40:
			smile = "üò•"
		elif percents < 60:
			smile = "üòê"
		elif percents < 90:
			smile = "üòÄ"
		else:
			smile = "üòé"


		text = f"Congratulations! You have successfully completed all the lessons on creating a prototype for a quality checklist. Your UI design skills have improved significantly, and we are sure that you are ready to put them into practice. However, this is not the end of our journey together! Soon we will prepare new lessons and projects for you to help you continue your development in the field of design. Stay tuned and get ready for new challenges and achievements! üëçüòá"
		# –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ "–ö –æ–ø–ª–∞—Ç–µ" >> —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
		# keyboard2 = telebot.types.InlineKeyboardMarkup()
		# keyboard2.row(telebot.types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –ö—É—Ä—Å '–î–∂–∞–∑-–í–æ–∫–∞–ª'", callback_data="?pay"))

		db.set_user(user["chat_id"], {"is_passed": False, "is_passing": False})

		return {
			"text": text,
			"keyboard": None
		}

	question = db.get_question(user["question_index"])

	if question is None:
		return

	keyboard = telebot.types.InlineKeyboardMarkup()
	for answer_index, answer in enumerate(question["answers"]):
		keyboard.row(telebot.types.InlineKeyboardButton(f"{chr(answer_index + 97)}) {answer}",
														callback_data=f"?ans&{answer_index}"))

	text = f"–£—Ä–æ–∫ ‚Ññ{user['question_index'] + 1}\n\n{question['text']}"

	return {
		"text": text,
		"keyboard": keyboard
	}


def get_answered_message(user):
	question = db.get_question(user["question_index"])

	text = f"Question ‚Ññ{user['question_index'] + 1}\n\n{question['text']}\n"

	for answer_index, answer in enumerate(question["answers"]):
		text += f"{chr(answer_index + 97)}) {answer}"

		if answer_index == question["correct"]:
			text += " ‚úÖ"
		elif answer_index == user["answers"][-1]:
			text += " ‚ùå"

		text += "\n"

	keyboard = telebot.types.InlineKeyboardMarkup()
	keyboard.row(telebot.types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="?next"))

	return {
		"text": text,
		"keyboard": keyboard
	}


bot.polling()
